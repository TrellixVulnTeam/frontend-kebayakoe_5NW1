{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\USER\\\\Documents\\\\Gilang\\\\Projects\\\\GRH-MERN\\\\frontend\\\\src\\\\elements\\\\Form\\\\InputText\\\\InputText.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport propTypes from \"prop-types\";\nimport \"./InputText.scss\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function InputText(props) {\n  _s();\n\n  const {\n    value,\n    type,\n    placeholder,\n    name,\n    prepend,\n    append,\n    outerClassName,\n    inputClassName,\n    errorResponse\n  } = props;\n  const [HasError, setHasError] = useState(null);\n  let pattern = \"\";\n  if (type === \"email\") pattern = /^[^s@]+@[^\\s@]+$/;\n  if (type === \"tel\") pattern = \"[0-9]*\";\n\n  const onChange = e => {\n    const target = {\n      target: {\n        name: name,\n        value: e.target.value\n      }\n    };\n\n    if (type === \"email\") {\n      if (!pattern.test(e.target.value)) setHasError(errorResponse);else setHasError(null);\n    }\n\n    if (type === \"tel\") {\n      if (e.target.validaty.valid) props.onChange(target);\n    } else {\n      props.onChange(target);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: [\"input-text mb-3\", outerClassName].join(\" \"),\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input-group\",\n      children: [prepend && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input-group-prepend bg-gray-900\",\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"input-group-text\",\n          children: prepend\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        name: name,\n        type: type,\n        pattern: pattern,\n        className: [\"form-control\", inputClassName].join(\" \"),\n        value: value,\n        placeholder: placeholder,\n        onChange: onchange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this), append && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input-group-append bg-gray-900\",\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"input-group-text\",\n          children: append\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this), HasError && /*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"error-helper\",\n      children: HasError\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 20\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n}\n\n_s(InputText, \"XLOKJrIg1/Lga1Mf74oe/AAi55o=\");\n\n_c = InputText;\nInputText.defaultProps = {\n  type: \"text\",\n  pattern: \"\",\n  placeholder: \"Please type here...\",\n  errorResponse: \"Please match the requested format\"\n};\nInputText.propTypes = {\n  name: propTypes.string.isRequired,\n  value: propTypes.oneOfType([propTypes.number, propTypes.string]).isRequired,\n  onchange: propTypes.func.isRequired,\n  prepend: propTypes.oneOfType([propTypes.number, propTypes.string]),\n  append: propTypes.oneOfType([propTypes.number, propTypes.string]),\n  type: propTypes.string,\n  placeholder: propTypes.string,\n  outerClassName: propTypes.string,\n  inputClassName: propTypes.string\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"InputText\");","map":{"version":3,"sources":["C:/Users/USER/Documents/Gilang/Projects/GRH-MERN/frontend/src/elements/Form/InputText/InputText.js"],"names":["React","useState","propTypes","InputText","props","value","type","placeholder","name","prepend","append","outerClassName","inputClassName","errorResponse","HasError","setHasError","pattern","onChange","e","target","test","validaty","valid","join","onchange","defaultProps","string","isRequired","oneOfType","number","func"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\r\nimport propTypes from \"prop-types\";\r\n\r\nimport \"./InputText.scss\";\r\n\r\nexport default function InputText(props) {\r\n  const { value, type, placeholder, name, prepend, append, outerClassName, inputClassName, errorResponse } = props;\r\n\r\n  const [HasError, setHasError] = useState(null);\r\n  let pattern = \"\";\r\n  if (type === \"email\") pattern = /^[^s@]+@[^\\s@]+$/;\r\n  if (type === \"tel\") pattern = \"[0-9]*\";\r\n\r\n  const onChange = (e) => {\r\n    const target = {\r\n      target: {\r\n        name: name,\r\n        value: e.target.value,\r\n      },\r\n    };\r\n\r\n    if (type === \"email\") {\r\n      if (!pattern.test(e.target.value)) setHasError(errorResponse);\r\n      else setHasError(null);\r\n    }\r\n\r\n    if (type === \"tel\") {\r\n      if (e.target.validaty.valid) props.onChange(target);\r\n    } else {\r\n      props.onChange(target);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className={[\"input-text mb-3\", outerClassName].join(\" \")}>\r\n      <div className=\"input-group\">\r\n        {prepend && (\r\n          <div className=\"input-group-prepend bg-gray-900\">\r\n            <span className=\"input-group-text\">{prepend}</span>\r\n          </div>\r\n        )}\r\n        <input name={name} type={type} pattern={pattern} className={[\"form-control\", inputClassName].join(\" \")} value={value} placeholder={placeholder} onChange={onchange} />\r\n        {append && (\r\n          <div className=\"input-group-append bg-gray-900\">\r\n            <span className=\"input-group-text\">{append}</span>\r\n          </div>\r\n        )}\r\n      </div>\r\n      {HasError && <span className=\"error-helper\">{HasError}</span>}\r\n    </div>\r\n  );\r\n}\r\n\r\nInputText.defaultProps = {\r\n  type: \"text\",\r\n  pattern: \"\",\r\n  placeholder: \"Please type here...\",\r\n  errorResponse: \"Please match the requested format\",\r\n};\r\n\r\nInputText.propTypes = {\r\n  name: propTypes.string.isRequired,\r\n  value: propTypes.oneOfType([propTypes.number, propTypes.string]).isRequired,\r\n  onchange: propTypes.func.isRequired,\r\n  prepend: propTypes.oneOfType([propTypes.number, propTypes.string]),\r\n  append: propTypes.oneOfType([propTypes.number, propTypes.string]),\r\n  type: propTypes.string,\r\n  placeholder: propTypes.string,\r\n  outerClassName: propTypes.string,\r\n  inputClassName: propTypes.string,\r\n};\r\n"]},"metadata":{},"sourceType":"module"}